openapi: 3.0.0
info:
  title: Bear API
  description: The bare bones API for Bear
  version: 1.0.0
servers:
  - url: http://localhost:3001
paths:
  /:
    get:
      summary: Get Hello Message
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
  /community_mod:
    get:
      summary: Get all community moderators
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommunityMod'
    post:
      summary: Create a new community moderator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityMod'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error posting community mod
  /community_mod/{communityId}/{userId}:
    get:
      summary: Get community moderator by community ID and user ID
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the community
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityMod'
        '404':
          description: Community Mod not found
        '500':
          description: Error fetching Community Mod
    delete:
      summary: Delete community moderator by community ID and user ID
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the community
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user
      responses:
        '200':
          description: Community Mod deleted successfully
        '500':
          description: Error deleting community mod
  /community_section:
    get:
      summary: Get all community sections
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommunitySection'
    post:
      summary: Create a new community section
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunitySection'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error creating Community Section
  /community_section/{communityId}:
    get:
      summary: Get community sections by community ID
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the community
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommunitySection'
        '404':
          description: Community Sections not found
        '500':
          description: Error fetching Community Section
  /community_section/{communityId}/{sectionId}:
    get:
      summary: Get community section by community ID and section ID
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the community
        - name: sectionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the section
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunitySection'
        '404':
          description: Community Section not found
        '500':
          description: Error fetching Community Section
    put:
      summary: Update community section by community ID and section ID
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the community
        - name: sectionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the section
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunitySection'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error updating Community Section
    delete:
      summary: Delete community section by community ID and section ID
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the community
        - name: sectionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the section
      responses:
        '200':
          description: Community Section deleted successfully
        '500':
          description: Error deleting Community Section

  /community_page:
    get:
      summary: Get all community pages
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommunityPage'
    post:
      summary: Create a new community page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityPage'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error creating Community Page

  /community_page/{communityId}/{pageId}:
    get:
      summary: Get community page by community ID and page ID
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the community
        - name: pageId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the page
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityPage'
        '404':
          description: Community Page not found
        '500':
          description: Error fetching Community Page
    put:
      summary: Update community page by community ID and page ID
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the community
        - name: pageId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityPage'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error updating Community Page
    delete:
      summary: Delete community page by community ID and page ID
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the community
        - name: pageId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the page
      responses:
        '200':
          description: Community Page deleted successfully
        '500':
          description: Error deleting Community Page


  /community:
    get:
      summary: Get all communities
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Community'
    post:
      summary: Create a new community
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error creating Community

  /community/{id}:
    get:
      summary: Get community by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the community
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
        '404':
          description: Community not found
        '500':
          description: Error fetching Community
    put:
      summary: Update community by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the community
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error updating Community
    delete:
      summary: Delete community by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the community
      responses:
        '200':
          description: Community deleted successfully
        '500':
          description: Error deleting Community


  /login:
    get:
      summary: Get all login entries
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Login'
    post:
      summary: Create a new login entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error creating login entry
  /login/{userId}:
    get:
      summary: Get a specific login entry by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '404':
          description: Login entry not found
        '500':
          description: Error fetching login entry
    put:
      summary: Update a specific login entry by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error updating login entry
    delete:
      summary: Delete a specific login entry by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Login entry deleted successfully
        '500':
          description: Error deleting login entry
  /reply_like:
    get:
      summary: Get all reply_like entries
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplyLike'
    post:
      summary: Create a new reply_like entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplyLike'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error creating reply_like entry
  /reply_like/{threadId}/{replyId}/{userId}:
    get:
      summary: Get a specific reply_like entry by thread ID, reply ID, and user ID
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: replyId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplyLike'
        '404':
          description: Reply Like entry not found
        '500':
          description: Error fetching reply_like entry
    put:
      summary: Update a specific reply_like entry by thread ID, reply ID, and user ID
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: replyId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplyLike'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error updating reply_like entry
    delete:
      summary: Delete a specific reply_like entry by thread ID, reply ID, and user ID
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: replyId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Reply Like entry deleted successfully
        '500':
          description: Error deleting reply_like entry
  /reply:
    get:
      summary: Get all replies
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reply'
    post:
      summary: Create a new reply
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reply'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error creating reply
  /reply/{threadId}/{replyId}:
    get:
      summary: Get a specific reply by thread ID and reply ID
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: replyId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '404':
          description: Reply not found
        '500':
          description: Error fetching reply
    put:
      summary: Update a specific reply by thread ID and reply ID
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: replyId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error updating reply
    delete:
      summary: Delete a specific reply by thread ID and reply ID
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: replyId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Reply deleted successfully
        '500':
          description: Error deleting reply
  /thread_like:
    get:
      summary: Get all thread_like entries
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ThreadLike'
    post:
      summary: Create a new thread_like entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadLike'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error creating thread_like entry
  /thread_like/{threadId}:
    get:
      summary: Get thread_like entries for a specific thread ID
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ThreadLike'
        '500':
          description: Error fetching thread_like entries
  /thread_like/{threadId}/{userId}:
    delete:
      summary: Delete thread_like entries for a specific thread ID and user ID
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Thread Like entries deleted successfully
        '500':
          description: Error deleting thread_like entries

  /thread:
    get:
      summary: Read all threads
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Thread'
    post:
      summary: Create a new thread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error creating thread

  /thread/{threadId}:
    get:
      summary: Read a specific thread by thread ID
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the thread
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        '404':
          description: Thread not found
        '500':
          description: Error fetching thread
    put:
      summary: Update a specific thread by thread ID
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the thread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error updating thread
    delete:
      summary: Delete a specific thread by thread ID
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the thread
      responses:
        '200':
          description: Thread deleted successfully
        '500':
          description: Error deleting thread

  /user_subscription:
    get:
      summary: Read all user subscription entries
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSubscription'
    post:
      summary: Create a new user subscription entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscription'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error creating user subscription entry

  /user_subscription/user/{userId}:
    get:
      summary: Read user subscription entries for a specific user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSubscription'
        '500':
          description: Error fetching user subscription entries

  /user_subscription/{userId}/{communityId}/{section}:
    delete:
      summary: Delete user subscription entries for a specific user ID, community ID, and section
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the community
        - name: section
          in: path
          required: true
          schema:
            type: string
          description: Name of the section
      responses:
        '200':
          description: User subscription entries deleted successfully
        '500':
          description: Error deleting user subscription entries
  /user:
    get:
      summary: Read all user entries
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error creating user entry

  /user/{userId}:
    get:
      summary: Read a specific user entry by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Error fetching user entry
    put:
      summary: Update a specific user entry by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
        '500':
          description: Error updating user entry
    delete:
      summary: Delete a specific user entry by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user
      responses:
        '200':
          description: User entry deleted successfully
        '500':
          description: Error deleting user entry

components:
  schemas:
    CommunityMod:
      type: object
      properties:
        community_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
      required:
        - community_id
        - user_id
    CommunitySection:
      type: object
      properties:
        section_id:
          type: integer
          format: int64
        community_id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
      required:
        - section_id
        - community_id
        - name
        - description # pretty sure description is required, could be adjusted if needed
    CommunityPage:
      type: object
      properties:
        page_id:
          type: integer
          format: int64
        community_id:
          type: integer
          format: int64
        page_name:
          type: string
        content:
          type: string       
      required:
        - community_id
        - page_id
        - page_name
        - content
    Community:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tagline:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        owner_id:
          type: integer
          format: int64
      required:
        - id
        - name
        - tagline
        - created_at
        - owner_id
    Login:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        passwordSalt:
          type: string
        passwordHash:
          type: string
      required:
        - user_id
        - passwordSalt
        - passwordHash
    ReplyLike:
      type: object
      properties:
        thread_id:
          type: integer
          format: int64
        reply_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        time:
          type: string
          format: date-time
      required:
        - thread_id
        - reply_id
        - user_id
        - time
    Reply:
      type: object
      properties:
        thread_id:
          type: integer
          format: int64
        reply_id:
          type: integer
          format: int64
        content:
          type: string
        user_id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
      required:
        - thread_id
        - reply_id
        - content
        - user_id
        - created_at
    ThreadLike:
      type: object
      properties:
        thread_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        time:
          type: string
          format: date-time
      required:
        - thread_id
        - user_id
        - time
    Thread:
      type: object
      properties:
        community_id:
          type: integer
          format: int64
        section_id:
          type: integer
          format: int64
        thread_id:
          type: integer
          format: int64
        title:
          type: string
          maxLength: 100
        content:
          type: string
          maxLength: 2000
        user_id:
          type: integer
          format: int64
        views:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
      required:
        - community_id
        - section_id
        - thread_id
        - title
        - content
        - user_id
        - views
        - created_at
    UserSubscription:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        community_id:
          type: integer
          format: int64
        section_id:
          type: integer
          format: int64
      required:
        - user_id
        - community_id
        - section_id
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 32
        email:
          type: string
          maxLength: 200
        created_at:
          type: string
          format: date-time
        last_online:
          type: string
          format: date-time
        birthday:
          type: string
          format: date
        gender:
          type: string
          maxLength: 16
        avatar_url:
          type: string
          maxLength: 500
        bio:
          type: string
          maxLength: 500
      required:
        - id
        - name
        - email
        - created_at
        
      

      
